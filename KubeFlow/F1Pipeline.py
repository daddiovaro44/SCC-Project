import kfp
from kfp import dsl
from kfp.components import func_to_container_op

@func_to_container_op
def show_results(decision_tree_accuracy: float, 
                 decision_tree_best_param: str, 
                 logistic_regression_accuracy: float, 
                 logistic_regression_best_param: str, 
                 random_forest_accuracy: float, 
                 random_forest_best_param: str) -> None:

    # Given the outputs from decision_tree, logistic_regression and random_forest components the results are shown.
    print(f"Decision tree (best_param): {decision_tree_best_param}")
    print(f"Decision tree (accuracy): {decision_tree_accuracy}")
    print(f"Logistic regression (best_param): {logistic_regression_best_param}")
    print(f"Logistic regression (accuracy): {logistic_regression_accuracy}")
    print(f"Random forest (best_param): {random_forest_best_param}")
    print(f"Random forest (accuracy): {random_forest_accuracy}")


@dsl.pipeline(name='F1 Pipeline', description='Applies Decision Tree, Logistic Regression and Random Forest for F1 classification problem.')
def F1pipeline():

    # Loads the yaml manifest for each component
    load = kfp.components.load_component_from_file('load_data/load_data.yaml')
    decision_tree = kfp.components.load_component_from_file('decision_tree/decision_tree.yaml')
    logistic_regression = kfp.components.load_component_from_file('logistic_regression/logistic_regression.yaml')
    random_forest = kfp.components.load_component_from_file('random_forest/random_forest.yaml')
    
    # Run load_data task
    load_task = load()

    # Run tasks "decison_tree", "logistic_regression" and "random_forest" given the output generated by "load_task".
    decision_tree_task = decision_tree(load_task.output)
    logistic_regression_task = logistic_regression(load_task.output)
    random_forest_task = random_forest(load_task.output)

    # Given the outputs from "decision_tree", "logistic_regression" and "random_forest"
    # the component "show_results" is called to print the results.
    show_results(decision_tree_task.outputs['Accuracy'],
                 decision_tree_task.outputs['Best_param'],
                 logistic_regression_task.outputs['Accuracy'],
                 logistic_regression_task.outputs['Best_param'], 
                 random_forest_task.outputs['Accuracy'],
                 random_forest_task.outputs['Best_param'])

if __name__ == '__main__':
    kfp.compiler.Compiler().compile(F1pipeline, 'F1Pipeline.yaml')
