import kfp
from kfp import dsl
from kfp.components import func_to_container_op


@func_to_container_op
def show_results(decision_tree: float, logistic_regression: float, random_forest: float) -> None:
    # Given the outputs from decision_tree and logistic regression components
    # the results are shown.

    print(f"Decision tree (accuracy): {decision_tree}")
    print(f"Logistic regression (accuracy): {logistic_regression}")
    print(f"Random forest (accuracy): {random_forest}")

@dsl.pipeline(name='F1 Pipeline', description='Applies Decision Tree and Logistic Regression for F1 classification problem.')
def F1pipeline():

    # Loads the yaml manifest for each component
    load = kfp.components.load_component_from_file('load_data/load_data.yaml')
    decision_tree = kfp.components.load_component_from_file('decision_tree/decision_tree.yaml')
    logistic_regression = kfp.components.load_component_from_file('logistic_regression/logistic_regression.yaml')
    random_forest = kfp.components.load_component_from_file('random_forest/random_forest.yaml')
    
    # Run load_data task
    load_task = load()

    # Run tasks "decison_tree" and "logistic_regression" given
    # the output generated by "load_task".
    decision_tree_task = decision_tree(load_task.output)
    logistic_regression_task = logistic_regression(load_task.output)
    random_forest_task = random_forest(load_task.output)
    # Given the outputs from "decision_tree" and "logistic_regression"
    # the component "show_results" is called to print the results.
    #show_results(decision_tree_task.output, logistic_regression_task.output, random_forest_task.output)


if __name__ == '__main__':
    kfp.compiler.Compiler().compile(F1pipeline, 'F1Pipeline_grid.yaml')
